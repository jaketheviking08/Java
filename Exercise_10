import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;

import javax.swing.*;
import javax.swing.border.*;
import java.net.URL;
import javax.imageio.ImageIO;

public class ChessGUI 
{
	 private final JPanel gui = new JPanel(new BorderLayout(3, 3));
	    private JButton[][] chessBoardSquares = new JButton[8][8];
	    private Image[][] chessPieceImages = new Image[2][6];
	    private JPanel chessBoard;
	    private final JLabel message = new JLabel("Chess Game Loading...");
	    private static final String COLS = "ABCDEFGH";
	    public static final int QUEEN = 0, KING = 1, ROOK = 2, KNIGHT = 3, BISHOP = 4, PAWN = 5;
	    public static final int[] STARTING_ROW = {ROOK, KNIGHT, BISHOP, KING, QUEEN, BISHOP, KNIGHT, ROOK};
	    public static final int BLACK = 0, WHITE = 1;

	    public ChessGUI() 
	    {
	        initializeGui();
	    }

	    public final void initializeGui() 
	    {
	        // create the images for the chess pieces
	        createImages();

	        // set up the main GUI
	        gui.setBorder(new EmptyBorder(5, 5, 5, 5));
	        JToolBar tools = new JToolBar();
	        tools.setFloatable(false);
	        gui.add(tools, BorderLayout.PAGE_START);
	        Action newGameAction = new AbstractAction("New") 
	        {

	            @Override
	            public void actionPerformed(ActionEvent e) 
	            {
	                setupNewGame();
	            }
	        };
	        
	        
	        tools.add(newGameAction);
	        tools.addSeparator();
	        tools.add(new JButton("Game Stats")); 
	        tools.addSeparator();
	        tools.add(new JButton("Statistics")); 
	        tools.addSeparator();
	        tools.add(new JButton("Quit")); 
	        tools.addSeparator();
	        tools.add(message);

	        gui.add(new JLabel("?"), BorderLayout.LINE_START);

	        chessBoard = new JPanel(new GridLayout(0, 9)) 
	        {

	            @Override
	            public final Dimension getPreferredSize() 
	            {
	                Dimension d = super.getPreferredSize();
	                Dimension prefSize = null;
	                Component c = getParent();
	                
	                if (c == null) 
	                {
	                    prefSize = new Dimension((int)d.getWidth(),(int)d.getHeight());
	                } 
	                
	                else if (c!=null && c.getWidth()>d.getWidth() && c.getHeight()>d.getHeight()) 
	                {
	                    prefSize = c.getSize();                    
	                } 
	                
	                else 
	                {
	                    prefSize = d;
	                }
	                
	                int w = (int) prefSize.getWidth();
	                int h = (int) prefSize.getHeight();
	                // the smaller of the two sizes
	                int s = (w>h ? h : w);
	                return new Dimension(s,s);
	            }
	        };
	        
	        chessBoard.setBorder(new CompoundBorder(new EmptyBorder(8,8,8,8),new LineBorder(Color.BLACK)));
	        
	        // Set the BG to be green
	        Color green = new Color(0,179,30);
	        
	        chessBoard.setBackground(green);
	        
	        JPanel boardConstrain = new JPanel(new GridBagLayout());
	        
	        boardConstrain.setBackground(green);
	        
	        boardConstrain.add(chessBoard);
	        
	        gui.add(boardConstrain);

	        // create the chess board squares
	        Insets buttonMargin = new Insets(0, 0, 0, 0);
	        
	        for (int i = 0; i < chessBoardSquares.length; i++) 
	        {
	            for (int j = 0; j < chessBoardSquares[i].length; j++) 
	            {
	                JButton b = new JButton();
	                
	                b.setMargin(buttonMargin);
	                // our chess pieces are 64x64 px in size, so we'll
	                // 'fill this in' using a transparent icon..
	                ImageIcon icon = new ImageIcon(new BufferedImage(64, 64, BufferedImage.TYPE_INT_ARGB));
	                
	                b.setIcon(icon);
	                
	                if ((j % 2 == 1 && i % 2 == 1)
	                        //) {
	                		
	                        || (j % 2 == 0 && i % 2 == 0)) 
	                {
	                    b.setBackground(Color.WHITE);                    
	                } 
	                
	                else 
	                {
	                    b.setBackground(Color.BLACK);
	                }
	                
	                chessBoardSquares[j][i] = b;
	            }
	        }

	        /*
	         * fill the chess board
	         */
	        
	        chessBoard.add(new JLabel(""));
	        
	        // fill the top row
	        
	        for (int i = 0; i < 8; i++) 
	        {
	            chessBoard.add(new JLabel(COLS.substring(i, i + 1),SwingConstants.CENTER));
	        }
	        
	        // fill the black non-pawn piece row
	        
	        for (int i = 0; i < 8; i++) 
	        {
	            for (int j = 0; j < 8; j++) 
	            {
	                switch (j) 
	                {
	                    case 0:
	                    	
	                        chessBoard.add(new JLabel("" + (9-(i + 1)),SwingConstants.CENTER));
	                        
	                    default:
	                    	
	                        chessBoard.add(chessBoardSquares[j][i]);
	                }
	            }
	        }
	    }

	    public final JComponent getGui() 
	    {
	        return gui;
	    }

	    private final void createImages() 
	    {
	    	
	        try         
	        {
	            /*URL url = new URL("https://i.stack.imgur.com/memI0.png");
	                        
	            BufferedImage bi = ImageIO.read(url);
	            */
	            File file = new File("C:\\eclipse\\Chess_Game\\src\\chess.png");
	            
	            BufferedImage bi = ImageIO.read(file);
	            
	            for (int i = 0; i < 2; i++) 
	            {
	                for (int j = 0; j < 6; j++) 
	                {
	                    chessPieceImages[i][j] = bi.getSubimage(j * 64, i * 64, 64, 64);
	                }
	            }
	        } 
	        
	        catch (Exception e) 
	        {
	            e.printStackTrace();
	            System.exit(1);
	        }
	    }
	    
	    /**
	     * Initializes the icons of the initial chess board piece places
	     */
	    private final void setupNewGame() 
	    {
	        message.setText("It's your turn!");
	        
	        // set up the black pieces
	        
	        for (int i = 0; i < STARTING_ROW.length; i++) 
	        {
	            chessBoardSquares[i][0].setIcon(new ImageIcon(chessPieceImages[BLACK][STARTING_ROW[i]]));
	        }
	        
	        for (int i = 0; i < STARTING_ROW.length; i++) 
	        {
	            chessBoardSquares[i][1].setIcon(new ImageIcon(chessPieceImages[BLACK][PAWN]));
	        }
	        
	        // set up the white pieces
	        
	        for (int i = 0; i < STARTING_ROW.length; i++) 
	        {
	            chessBoardSquares[i][6].setIcon(new ImageIcon(chessPieceImages[WHITE][PAWN]));
	        }
	        
	        for (int i = 0; i < STARTING_ROW.length; i++) 
	        {
	            chessBoardSquares[i][7].setIcon(new ImageIcon(chessPieceImages[WHITE][STARTING_ROW[i]]));
	        }
	    }

	    public static void main(String[] args) 
	    {
	        Runnable r = new Runnable() 
	        {

	            @Override
	            public void run() 
	            {
	                ChessGUI cg = new ChessGUI();

	                JFrame f = new JFrame("Chess Game - Exercise 10");
	                f.add(cg.getGui());
	                // Ensures JVM closes after frame(s) closed and
	                // all non-daemon threads are finished
	                f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	                // See https://stackoverflow.com/a/7143398/418556 for demo.
	                f.setLocationByPlatform(true);

	                // ensures the frame is the minimum size it needs to be
	                // in order display the components within it
	                f.pack();
	                // ensures the minimum size is enforced.
	                f.setMinimumSize(f.getSize());
	                f.setVisible(true);
	            }
	        };
	        // Swing GUIs should be created and updated on the EDT
	        // http://docs.oracle.com/javase/tutorial/uiswing/concurrency
	        SwingUtilities.invokeLater(r);
	    }
		
	
}
